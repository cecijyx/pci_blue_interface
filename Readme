//===========================================================================
// $Id: Readme,v 1.3 2001-02-26 11:50:06 bbeaver Exp $
//
// Copyright 2001 Blue Beaver.  All Rights Reserved.
//
// Summary:  A general overview of what the pci_blue_interface is, and
//           notes about how to use it.
//           The pre-2.0 version of the pci_blue_interface is NONFUNCTIONAL.
//           It is work in progress.  Much work remains.
//
//           The working components are:
//             A top-level regression framework.
//             A PCI Bus Monitor to try to detect protocol violations.
//             Behaviorial PCI Master and Target modules.
//             A pci_test_commander to command PCI Master devices to do activity.
//
//           The partially working components are:
//             An example chip containing the pci_blue_interface.
//             An example Host which exercises the pci_blue_interface.
//
//           The non-working, and in fact non-existent parts are:
//             The synthesizable Master and Target modules.
//
// This library is free software; you can distribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published
// by the Free Software Foundation; either version 2.1 of the License, or
// (at your option) any later version.
//
// This library is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library.  If not, write to
// Free Software Foundation, Inc.
// 59 Temple Place, Suite 330
// Boston, MA 02111-1307 USA
//
// Author's note about this license:  The intention of the Author and of
// the Gnu Lesser General Public License is that users should be able to
// use this code for any purpose, including combining it with other source
// code, combining it with other logic, translated it into a gate-level
// representation, or projected it into gates in a programmable or
// hardwired chip, as long as the users of the resulting source, compiled
// source, or chip are given the means to get a copy of this source code
// with no new restrictions on redistribution of this source.
//
// If you make changes, even substantial changes, to this code, or use
// substantial parts of this code as an inseparable part of another work
// of authorship, the users of the resulting IP must be given the means
// to get a copy of the modified or combined source code, with no new
// restrictions on redistribution of the resulting source.
//
// Separate parts of the combined source code, compiled code, or chip,
// which are NOT derived from this source code do NOT need to be offered
// to the final user of the chip merely because they are used in
// combination with this code.  Other code is not forced to fall under
// the GNU Lesser General Public License when it is linked to this code.
// The license terms of other source code linked to this code might require
// that it NOT be made available to users.  The GNU Lesser General Public
// License does not prevent this code from being used in such a situation,
// as long as the user of the resulting IP is given the means to get a
// copy of this component of the IP with no new restrictions on
// redistribution of this source.
//
// This code was developed using VeriLogger Pro, by Synapticad.
// Their support is greatly appreciated.
//
//===========================================================================

`include "pci_blue_options.vh"
`include "pci_blue_constants.vh"
`timescale 1ns/1ps

//===========================================================================
//
// This set of files describes and exercises a 32-bit PCI Host Interface.
//
// The top-level module of the synthesizable interface is called
//   pci_blue_interface.
//
// Macros which select various characteristics of the interface are
//   defined in the file pci_blue_options.vh
//
// Macros which are not adjustable are defined in pci_blue_constants.vh.
//
// A low-level library of timing-critical and placement-critical cells
//   are defined in pci_vendor_lib.v.  When this interface is synthesized,
//   the user may find it useful to instantiate specific modules in the
//   pci_vendor_lib.v file to force the use of these modules by synthesis.
//
// Several files are here only to support the development effort.
// The file pci_test_top.v instantiates PCI Bus pullups, a PCI
//   monitor, several behaviorial PCI test devices, a stimulus generator,
//   and an example of a chip using the pci_blue_interface.
//
// The Stimulus generator pci_test_commander.v gives commands to initiate
//   PCI activity to all of the Behaviorial Masters and Synthesizable Masters
//   in the system.
// The commands which are issued are written in sequential verilog.  It
//   might be interesting to add a script reader.
// There is said to be a commonly used File IO package for verilog on the
//   net somewhere.  Is this true?  Will it work with verilogger?
//
// The pci_bus_monitor watches the activity on the PCI bus, and
//   also watches the values of internal OE wires in the several
//   PCI devices, and tries to detect bus protocol violations.
// The bus monitor should be extended to write a transcript of the PCI
//   activity it sees into a file.
//
// The pci_behaviorial_device.v instantiates pci_behaviorial_master.v
//   and pci_behaviorial_target.v.  These modules together implement a test
//   PCI device.
//
// The Bahaviorial Master takes commands from the pci_test_commander.
// It can make transfers of different lengths, and can make Address and
//   Data parity Errors.
// The Behaviorial Master checks the Data and Error status of the transfers
//   it initiates.
// The Behaviorial Master does not re-request when it receives a Target
//   Disconnect.  Re-requesting is the responsibility ofthe test commander.
// The Behaviorial Target is commanded to respond quickly or slowly, with
//   or without errors, by information encoded onto address bits [24:8].
//
// The Behaviorial Target implements a set of Config Registers.  It also
//   contains a 256 byte SRAM to allow test code to write then read back data.
// It is completely passive, and does not check the transfers it participates in.
// The Behaviorial Target uses the middle 16 bits of each PCI Address
//   it responds to as paramaters to control how it responds.  It can
//   respond fast or slow, and can generate data errors and disconnects.
// Since it can be commanded to disconnect certain transactions, the user
//   of a Synthesizable PCI interface will have to be careful about issuing
//   these references.  Once an address is issued telling the Target to
//   disconnect, The Target will disconnect IT, the Master will re-issue it,
//   and a livelock will result.  It may be necessary to hack the master
//   to not reissue certain address values while in debug mode to prevent
//   this problem.
//
// The file pci_example_chip combines the pci_blue_interface with a fake
//   host controller (which generates test stimulus under the control of
//   the pci_test_commander), the external IO pads, an optional pci_arbiter,
//   and the pci_blue_interface.
//
// The file pci_blue_interface instantiates the FIFOs needed to communicate
//   between the host and the PCI interface.  It also instantiates the
//   pci_blue_master.v and pci_blue_target.v modules, which together make
//   up the pci interface.
//
// The fake Host Controller, and any future real Host Controller, communicates
//   with the pci_blue_interface using 3 FIFOs.
//
// The host_request_fifo is filled by the host to initiate Master activity.
//
// The host_response_fifo is filled by the external PCI Bus to initiate
//   host memory activity.
//
// The host_response_fifo also returns results and read data back after the
//   master-initiated Bus activity completes.
//
// The delayed_read_data_fifo is used to send data from the Host memory out
//   to an external PCI Master.  All PCI Bus Reads are executed as delayed
//   reads, and all read data and control flows through the delayed_read_data_fifo.
//
// PCI Ordering rules require that when a Delayed Read is done, add outstanding
//   posted Write data must be committed to remote memory before the Delayed
//   Read can complete.  Since the Delayed Read FIFO and the Host Request FIFO
//   are different FIFOs, the ordering cannot be guaranteed.
// The pci_blue_interface satisfies the pci Ordering Rule for Delayed Reads
//   by using a Write Fence which is passed through the Host Request FIFO
//   before the Delayed Read data is allowed to pass over the bus.
//
//===========================================================================


